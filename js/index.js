// =====================
// Repeta ==============
// =====================

/*
 * –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
 * - –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * - –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
 */

// const playlist = {
//   name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//   rating: 5,
//   tracks: ['—Ç—Ä–µ–∫-1', '—Ç—Ä–µ–∫-2', '—Ç—Ä–µ–∫-3'],
//   trackCount: 3,
// };

// const {
//   rating,
//   tracks,
//   name,
//   trackCount: numberOfTracks = 0,
//   author = 'user',
// } = playlist;

// console.log(numberOfTracks);
//================================================

/*
 * –ì–ª—É–±–æ–∫–∞—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
 */

// const profile = {
//   name: 'Jacques Gluke',
//   tag: 'jgluke',
//   location: 'Ocho Rios, Jamaica',
//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//   stats: {
//     followers: 5603,
//     views: 4827,
//     likes: 1308,
//   },
// };

// const {
//   avatar,
//   name,
//   tag,
//   location,
//   stats: { followers, views, likes },
// } = profile;

// console.log(name, tag, location, avatar, followers, views, likes);
// ==================================================================

/*
 * –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
 */

// const rgb = [255, 100, 80];
// const [red, green, blue] = rgb;

// // console.log(red, green, blue);
//================================================

// const authors = {
//   kiwi: 4,
//   poly: 7,
//   ajax: 9,
//   mango: 6,
// };

// const entries = Object.entries(authors);

// console.log(entries);

// // —É—Ä3
// for (const [name, rating] of entries) {
//   // —É—Ä2
//   // const [name, rating] = entry;

//   // —É—Ä1
//   // const name = entry[0];
//   // const rating = entry[1];

//   console.log(name, rating);
// }
//==============================================

/*
 * –û–ø–µ—Ä–∞—Ü–∏—è rest (—Å–±–æ—Ä)
 */
// const profile = {
//   name: 'Jacques Gluke',
//   tag: 'jgluke',
//   location: 'Ocho Rios, Jamaica',
//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//   stats: {
//     followers: 5603,
//     views: 4827,
//     likes: 1308,
//   },
// };

// const { name, tag, location, ...restProps } = profile;

// console.log(profile);
// console.log(name, tag, location);
// console.log(restProps);

/*
 * –ü–∞—Ç—Ç–µ—Ä–Ω ¬´–û–±—å–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫¬ª
 * - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞-–æ–±—å–µ–∫—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏
 * - rest –ø—Ä–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–æ–¥–ø–∏—Å–∏
 */

// const profile = {
//   name: 'Jacques Gluke',
//   tag: 'jgluke',
//   location: 'Ocho Rios, Jamaica',
//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//   stats: {
//     followers: 5603,
//     views: 4827,
//     likes: 1308,
//   },
// };

// const showProfileInfo = function (userProfile) {
//   const { name, tag, location, ...restProps } = userProfile;

//   // console.log(name, tag, location, avatar, followers, views, likes);
//   console.log(restProps);
// };

// showProfileInfo(profile);

/*
 * =============================================
 * =============== Shoping Cart ================
 * =============================================
 * –†–∞–±–æ—Ç–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:
 * - getItems()
 * - add(product)
 * - remove(productName)
 * - clear()
 * - countTotalPrice()
 * - increaseQuantity(productName)
 * - decreaseQuantity(productName)
 *
 * { name: 'üçé', price: 50 }
 * { name: 'üçá', price: 70 }
 * { name: 'üçã', price: 60 }
 * { name: 'üçì', price: 110 }
 */

// function createUniqueID() {
//   return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2)}`;
// }

// const cart = {
//   items: [],

//   getItems() {
//     return this.items;
//   },

//   add(product) {
//     const { items } = this;

//     for (const item of items) {
//       if (item.name === product.name) {
//         item.quantity += 1;
//         return;
//       }
//     }

//     const newProduct = {
//       ...product,
//       quantity: 1,
//       id: crypto.randomUUID(),
//     };

//     items.push(newProduct);
//   },

//   remove(productName) {
//     const { items } = this;

//     for (let i = 0; i < items.length; i += 1) {
//       const { name } = items[i];

//       if (productName === name) {
//         items.splice(i, 1);
//       }
//     }
//   },

//   clear() {
//     this.items = [];
//   },

//   countTotalPrice() {
//     const { items } = this;
//     let total = 0;

//     for (const { quantity, price } of items) {
//       total += quantity * price;
//     }

//     return total;
//   },

//   increaseQuantity(productName) {
//     const { items } = this;

//     for (const item of items) {
//       if (item.name === productName) {
//         item.quantity += 1;
//       }
//     }
//   },

//   decreaseQuantity(productName) {
//     const { items } = this;

//     for (const item of items) {
//       if (item.name === productName && item.quantity <= 1) {
//         this.remove(productName);
//       } else if (item.name === productName) {
//         item.quantity -= 1;
//       }
//     }
//   },
// };

// console.table(cart.getItems());

// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçì', price: 110 });

// console.table(cart.getItems());

// cart.remove('üçé');
// console.table(cart.getItems());

// cart.clear();
// console.table(cart.getItems());

// cart.increaseQuantity('üçé');
// console.table(cart.getItems());

// cart.decreaseQuantity('üçã');
// cart.decreaseQuantity('üçã');
// cart.decreaseQuantity('üçì');

// console.table(cart.getItems());

// console.log('Total: ', cart.countTotalPrice());

/*
 * =================================================
 * ================== Finish Cart ==================
 * =================================================
 */

// –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π (–º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤)
// =================================================
// const friends = [
//   { name: 'Mango', online: false },
//   { name: 'Kiwi', online: true },
//   { name: 'Poly', online: false },
//   { name: 'Ajax', online: false },
// ];

// console.table(friends);

// –ò—â–µ–º –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏
// =================================================
// const findFriendByName = function (allFriends, friendName) {
//   for (const friend of allFriends) {
//     // console.log(friend);
//     // console.log(friend.name);

//     if (friend.name === friendName) {
//       return friend;
//     }
//   }

//   return '–ù–ï –ù–ê–®–õ–ò :(';
// };

// console.log(findFriendByName(friends, 'Poly'));
// console.log(findFriendByName(friends, 'Chelsy'));

// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
// =================================================
// const getAllNames = function (allFriends) {
//   const names = [];

//   for (const friend of allFriends) {
//     console.log(friend.name);

//     names.push(friend.name);
//   }

//   return names;
// };

// console.log(getAllNames(friends));

// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–ª–∞–π–Ω
// =================================================
// const getOnlineFriends = function (allFriends) {
//   const onlineFriends = [];

//   for (const friend of allFriends) {
//     // console.log(friend);
//     // console.log(friend.online);

//     if (friend.online) {
//       onlineFriends.push(friend);
//     }
//   }

//   return onlineFriends;
// };

// console.log(getOnlineFriends(friends));

// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –∫–æ—Ç–æ—Ä—ã–µ –æ—Ñ—Ñ–ª–∞–π–Ω
// ==================================================
// const getOfflineFriends = function (allFriends) {
//   const offlineFriends = [];

//   for (const friend of allFriends) {
//     // console.log(friend.online);

//     if (!friend.online) {
//       offlineFriends.push(friend);
//     }
//   }

//   return offlineFriends;
// };

// console.log(getOfflineFriends(friends));

// –ü–æ–ª—É—á–∞–µ–º –æ–±—å–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏
// ==================================================
// const getFriendsByStatus = function (allFriends) {
//   const friendsByStatus = {
//     online: [],
//     offline: [],
//   };

//   for (const friend of allFriends) {
//     if (friend.online) {
//       friendsByStatus.online.push(friend);
//       continue;
//     }

//     friendsByStatus.offline.push(friend);

//     // const key = friend.online ? 'online' : 'offline';
//     // friendsByStatus[key].push(friend);
//   }

//   return friendsByStatus;
// };

// console.log(getFriendsByStatus(friends));

// =====================
// Rysich ==============
// =====================
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze

// const user = {
//   name: 'Artem',
//   age: 28,
//   languages: {
//     html: false,
//     css: false,
//     js: true,
//     'React Native': false,
//   },
// };

// // console.log(user.languages.React_Native);
// // console.log(user['languages']['React Native']);

// for (const key in user) {
//   // console.log(user.key); // undefined
//   console.log(key);
//   console.log(user[key]);
//   // console.log(user[key]);
// }
// ============================================================

// const test = 3;
// const test2 = 45;
// const value = 'start';
// const value2 = 'End';
// const user = {
//   name: 'Artem',
//   age: 28,
//   languages: {
//     html: false,
//     css: false,
//     js: true,
//     'React Native': false,
//   },
//   // [value + value2] : 'some value',
//   result: test + test2,
// };
// console.log(user.result);

// user.age = 29;
// user.age += 1;

// user.city = 'VN';
// console.log(user);
// console.log(user.age);

// delete user.city;
// console.log(user);
// =========================================================

// const user = {
//   name: 'Artem',
//   age: 28,
//   languages: {
//     html: false,
//     css: false,
//     js: true,
//     'React Native': false,
//   },
// };

// Object.freeze(user);
// // user.asdfwesgfasdfasz = 'dasdgvsdfdafsed';
// // user.age = 100;
// console.log(user);
// ==========================================================

// const user = {
//   name: 'Artem',
//   age: 28,
//   languages: {
//     html: false,
//     css: false,
//     js: true,
//     'React Native': false,
//   },
// };
// // Object.freeze(user);

// const user2 = Object.create(user);
// user2.age = 33;
// console.log(user2);
// console.log(user);

// for (const key in user2) {
//   if (user2.hasOwnProperty(key)) {
//     console.log('Own', key, user2[key]);
//   } else {
//     console.log('All', key, user2[key]);
//   }
// }
// =======================================================

// const user = {
//   score: false,
// };

// if (user.hasOwnProperty('score')) {
//   console.log('yes');
// } else {
//   console.log('no');
// }

// if ('score' in user) {
//   console.log('yes');
// } else {
//   console.log('no');
// }

// if (user.score) {
//   console.log('yes');
// } else {
//   console.log('no');
// }
// ========================================================

// const user = {
//   name: 'Artem',
//   age: 28,
//   languages: {
//     html: false,
//     css: false,
//     js: true,
//     ReactNative: false,
//   },

//   sayHello() {
//     console.log(`My name ${this.name}`);
//   },

//   iKnow() {
//     // const keys = Object.keys(this.languages);
//     // console.log(keys);
//     // // const values = Object.values(this.languages);
//     // // console.log(values);
//     // // const entries = Object.entries(this.languages);
//     // // console.log(entries);

//     // // for (const key in this.languages) {
//     // //   if (this.languages[key]) {
//     // //     console.log(key);
//     // //   }
//     // // }

//     // for (const key of keys) {
//     //   // console.log(key);
//     //   if (this.languages[key]) {
//     //     console.log(key);
//     //   }
//     // }

//     const keys = Object.keys(this);
//     console.log('Keys from Object.keys:', keys);

//     for (const key of keys) {
//       if (typeof this[key] === 'function') {
//         continue;
//       } else {
//         console.log('key:', key);
//       }
//     }
//   },
// };

// user.iKnow();

// const user2 = Object.create(user);
// user2.name = 'Den';
// console.log('user2:', user2);
// user2.sayHello();
// user.sayHello();
//==============================================================

// Example 1 - –û—Å–Ω–æ–≤–∏ –æ–± '—î–∫—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –¥–ª—è –æ–±'—î–∫—Ç–∞ user, –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ:

// –¥–æ–¥–∞—î –ø–æ–ª–µ mood –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º 'happy'
// –∑–∞–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è hobby –Ω–∞ 'skydiving'
// –∑–∞–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è lastName –Ω–∞ 'Sirko'
// –∑–∞–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è premium –Ω–∞ false
// –≤–∏–≤–æ–¥–∏—Ç—å –≤–º—ñ—Å—Ç –æ–± '—î–∫—Ç–∞ user —É —Ñ–æ—Ä–º–∞—Ç—ñ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ Object.keys() —Ç–∞ for...of

// const user = {
//   firstName: 'Mango',
//   lastName: 'Homenko',
//   age: 20,
//   hobby: 'html',
//   premium: true,
// };

// console.log('user:', user);

// user.mode = 'happy';
// user.hobby = 'skydiving';
// user['lastName'] = 'Sirko';
// // user['premium'] = false;
// const key = 'premium';
// user[key] = false;

// console.log('user:', user);

// for (const key in user) {
//   console.log('for...in:', user[key]);
// }

// const keys = Object.keys(user);
// for (const key of keys) {
//   console.log('key:', key);
//   console.log('value:', user[key]);
//   console.log('key:value |:', `${key}: ${user[key]}`);
// }

// user.skills = {
//   js: true,
//   react: true,
//   node: false,
// };
// console.log('user:', user);
//============================================================

// Example 2 - –º–µ—Ç–æ–¥ Object.values()
// –£ –Ω–∞—Å —î –æ–±'—î–∫—Ç, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∑–∞—Ä–ø–ª–∞—Ç–∏ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—Ä–ø–ª–∞—Ç —ñ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∑–º—ñ–Ω–Ω—ñ–π sum. –ü–æ–≤–∏–Ω–Ω–æ –≤–∏–π—Ç–∏ 390. –Ø–∫—â–æ –æ–±'—î–∫—Ç salaries –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—î –±—É—Ç–∏ 0.

// const salaries = {
//   John: 100,
//   Ann: 160,
//   Pete: 130,
// };

// let sum = 0;

// // const values = Object.values(salaries);
// // console.log(values);

// // for (const value of values) {
// //   // console.log(value);
// //   sum += value;
// // }
// // console.log(sum);

// for (const key in salaries) {
//   console.log(key);
//   console.log(salaries[key]);
//   sum += salaries[key];
// }
// console.log(sum);
// ========================================================

// Example 3 - –ú–∞—Å–∏–≤ –æ–± '—î–∫—Ç—ñ–≤
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calcTotalPrice(stones, stoneName), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–± '—î–∫—Ç—ñ–≤ —Ç–∞ —Ä—è–¥–æ–∫ –∑ –Ω–∞–∑–≤–æ—é –∫–∞–º–µ–Ω—é. –§—É–Ω–∫—Ü—ñ—è —Ä–∞—Ö—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º—ñ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º, —Ü—ñ–Ω–æ—é —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑ –æ–±'—î–∫—Ç–∞

// const stones = [
//   {
//     name: '–°–º–∞—Ä–∞–≥–¥',
//     price: 1300,
//     quantity: 4,
//   },
//   {
//     name: '–î—ñ–∞–º–∞–Ω—Ç',
//     price: 2700,
//     quantity: 3,
//   },
//   {
//     name: '–°–∞–ø—Ñ—ñ—Ä',
//     price: 400,
//     quantity: 7,
//   },
//   {
//     name: '–©–µ–±—ñ–Ω—å',
//     price: 200,
//     quantity: 2,
//   },
// ];

// function calcTotalPrice(stones, stoneName) {
//   for (const { name, price, quantity } of stones) {
//     if (name === stoneName) {
//       return price * quantity;
//     }
//   }

//   return '–¢–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π';
// }

// console.log(calcTotalPrice(stones, '–î—ñ–∞–º–∞–Ω—Ç'));
// ===========================================================

// Example 4 - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏–º –∫–∞–±—ñ–Ω–µ—Ç–æ–º —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫—É. –Ñ –æ–±'—î–∫—Ç account –≤ —è–∫–æ–º—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å–æ–º —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.

/*
 * –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤—Å—å–æ–≥–æ –¥–≤–∞.
 * –ú–æ–∂–Ω–∞ –ø–æ–∫–ª–∞—Å—Ç–∏ —á–∏ –∑–Ω—è—Ç–∏ –≥—Ä–æ—à—ñ –∑ —Ä–∞—Ö—É–Ω–∫—É.
 */

// const Transaction = {
//   DEPOSIT: 'deposit',
//   WITHDRAW: 'withdraw',
// };

// Object.freeze(Transaction);

/*
 * –ö–æ–∂–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏: id, type —Ç–∞ amount
 */

// const account = {
//   // –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É
//   balance: 0,

//   // –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
//   transactions: [
//     {
//       id: 16,
//       amount: 145,
//       type: 'deposit',
//     },
//   ],

//   /*
//    * –ú–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.
//    * –ü—Ä–∏–π–º–∞—î —Å—É–º—É —Ç–∞ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.
//    */

//   createTransaction(amount, type) {
//     return {
//       id: crypto.randomUUID(),
//       amount,
//       type,
//     };
//   },

//   /*
//    * –ú–µ—Ç–æ–¥, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É–º–∏ –¥–æ –±–∞–ª–∞–Ω—Å—É.
//    * –ü—Ä–∏–π–º–∞—î —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.
//    * –í–∏–∫–ª–∏–∫–∞—î createTransaction –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
//    * –ø—ñ—Å–ª—è —á–æ–≥–æ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
//    */

//   deposit(amount) {
//     if (amount <= 0) {
//       return 'Error';
//     }

//     const transaction = this.createTransaction(amount, Transaction.DEPOSIT);
//     this.balance += amount;
//     this.transactions.push(transaction);
//   },

//   /*
//    * –ú–µ—Ç–æ–¥, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∑–Ω—è—Ç—Ç—è —Å—É–º–∏ –∑ –±–∞–ª–∞–Ω—Å—É.
//    * –ü—Ä–∏–π–º–∞—î —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.
//    * –í–∏–∫–ª–∏–∫–∞—î createTransaction –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
//    * –ø—ñ—Å–ª—è —á–æ–≥–æ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.
//    *
//    * –Ø–∫—â–æ amount –±—ñ–ª—å—à–µ –Ω—ñ–∂ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å, –≤–∏–≤–æ–¥—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//    * –ø—Ä–æ —Ç–µ, —â–æ –∑–Ω—è—Ç—Ç—è —Ç–∞–∫–æ—ó —Å—É–º–∏ –Ω–µ –º–æ–∂–ª–∏–≤–µ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.
//    */
//   withdraw(amount) {
//     if (amount > this.balance) {
//       return '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤';
//     } else if (amount <= 0) {
//       return '–ó–Ω—è—Ç—Ç—è —Ç–∞–∫–æ—ó —Å—É–º–∏ –Ω–µ –º–æ–∂–ª–∏–≤–µ';
//     }

//     const transaction = this.createTransaction(amount, Transaction.WITHDRAW);
//     this.balance -= amount;
//     this.transactions.push(transaction);
//   },

//   /*
//    * –ú–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
//    */

//   getBalance() {
//     return this.balance;
//   },

//   /*
//    * –ú–µ—Ç–æ–¥ —à—É–∫–∞—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ id
//    */

//   getTransactionDetails(id) {
//     for (const transaction of this.transactions) {
//       if (transaction.id === id) {
//         return transaction;
//       }
//     }
//     return '–¢–∞–∫–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
//   },

//   /*
//    * –ú–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—à—Ç—ñ–≤
//    * –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —É—Å—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
//    */

//   getTransactionTotal(type) {
//     let total = 0;

//     for (const transaction of this.transactions) {
//       if (transaction.type !== type) {
//         continue;
//       }

//       total += transaction.amount;
//     }

//     return total;
//   },
//   getTransactions() {
//     return this.transactions;
//   },
// };

// console.log('Balance:', account.getBalance());
// account.deposit(1);
// account.deposit(1231);
// account.deposit(1431);
// console.log('Balance:', account.getBalance());
// console.log(account.withdraw(0));
// console.log(account.withdraw(12300));
// account.withdraw(123);
// console.log('Balance:', account.getBalance());
// console.log(account.getTransactionDetails(16));

// console.log(account.getTransactionTotal(Transaction.WITHDRAW));
// console.log(account.getTransactionTotal(Transaction.DEPOSIT));

// console.table(account.getTransactions());
// console.log(account);

// ============================================================
